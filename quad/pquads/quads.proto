// Copyright 2015 The Cayley Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package pquads;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
option (gogoproto.protosizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) =  true;

// Quad is in internal representation of quad used by Cayley.
message Quad {
  // TODO(dennwc): get rid of legacy fields with first opportunity and bump version

  string subject    = 1;
  string predicate  = 2;
  string object     = 3;
  string label      = 4;

  Value subject_value   = 5;
  Value predicate_value = 6;
  Value object_value    = 7;
  Value label_value     = 8;
}

// WireQuad is a quad that allows any value for it's directions.
message WireQuad {
  Value subject   = 1;
  Value predicate = 2;
  Value object    = 3;
  Value label     = 4;
}

// StrictQuad is a quad as described by RDF spec.
message StrictQuad {
  message Ref {
    reserved 1; // uint64 bnode = 1;
    oneof value {
      string bnode_label  = 2;
      string iri          = 3;
    }
  }
  Ref   subject   = 1;
  Ref   predicate = 2;
  Value object    = 3;
  Ref   label     = 4;
}

message Value {
  message TypedString {
    string value = 1;
    string type = 2;
  }
  message LangString {
    string value = 1;
    string lang = 2;
  }
  // From https://github.com/golang/protobuf/blob/master/ptypes/timestamp/timestamp.proto
  message Timestamp {
    int64 seconds = 1;
    int32 nanos = 2;
  }
  oneof value {
    bytes  raw = 1;
    string str = 2;
    string iri = 3;
    string bnode = 4;
    TypedString typed_str = 5;
    LangString  lang_str = 6;
    int64  int = 7;
    double float = 8;
    bool boolean = 9;
    Timestamp time = 10;
  }
}

message Header {
  // Full is set if encoder always writes every quad directions instead of
  // skipping duplicated values on each direction (except label) for subsequent quads.
  bool full = 1;
  // NotStrict is set if encoder emits WireQuad instead of StrictQuad messages.
  bool not_strict = 2;
}